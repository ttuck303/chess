Open Questions

1. what classes should be included?
	game class
	board class
	piece class
	(maybe) a class for each type of piece? <gut here is saying yes, they can inherit from piece class. 
	This will allow each piece to have a more lightweight array of available moves, since it will not 
	have to carry around the available moves of each of the other pieces. 



2. how do you check that a move is legal?
	- approach 1:
		- start with all the possible moves by a piece on a blank board, stored in an array
		- loop through each move and remove illegal moves:
			- moves that are off the board
			- moves that clash with own team
			- moves that put own team into check

			question 2a. Is this an egregious amount of calculating?
			do a worst case scenario analysis:
				32 pieces to start with
				only have to analyze the given piece
				in fact, you only have to analyze the given move - no need to generate every possible move!

				this unique movement by each piece furthers the argument for each piece having its own class
					need to do a quick review of inheritance...


3. how do you store the legal moves for a given piece? -> see #2a decision to make each piece its own class

4. what are the class and super class attributes and methods? In fact, outline all classes and what they should do here:

	Board Class
		check for check condition
		keeps track of movement history (would be really cool if you could load and save games from actual chess files, which is a thing)
		? does it need a custom data structure, or is a nested array as good as it gets? hash table? Something in my mind thinks that a hash would be nice since its 'flat'. Not sure if this is a valid reason to prefer them though, seeing as you will still need to enter the row/column combination in the same way each time. But this way you could more easily index one or the other with letters as they do in real chess, ie a7 to b4 (this is called file for the letters)
			? how do you pass specific objects into a hash 

	Piece Class
		assign symbol method
		counting pieces?

	Sub Piece
		team 
		type
		text representation
		symbol
		movement pattern
		check (king only) -> this is actually a board condition


		Pawn Class

			start with pawn and deal with character-specific movements
				can never move forward if a piece occupies the next spot up
				can move 1 or 2 if its the piece's first time moving

		King Class

		An aside: quick way to check for check condition
			1. scan all spaces immediately surrounding the king
				if they are either OOB or own team, then continue;
				if they are blank, search out in the direction of the blankness until another piece or a wall is detected


	# how to keep track of moves?
# three cases:
# discrete movers (knights)
# continuous movers (rooks, bishops, queens)
# conditional movers (king, pawn)
# technically, they are all conditional movers, as an piece could move in a way that would cause check
# which class should be responsible for making sure that a move doesn't move the king into check?

# Where the game is right now:
# display board
# get a player to move


____


Update 2015-09-14

As I work to convert the board to a hash, I am wondering if this is an intelligent / justified move. 
Displaying is certainly more complicated in this set up. 
Moving or checking spaces requires more legwork, whereas a nested array has built in structure that seems more beneficial - being able to scan a spot

Advantages of Hash Board
- spaces are named
	- allowing you to keep track of moves
	- preventing ambiguity when entering moves
- can more cleanly populate a board during initialization



Advantages of Nested Array Board


----

How do you represent a kind of piece's acceptable move patterns?
	idea 1: create acceptable x-y differences from start to finish, and check for edge cases in a seperate method
		note: direcitonality matters in some cases (pawns). Directionality is dependent on the color and board set up. Assuming board is the same every time, so I can use true value of y difference. 


		Pawn Movements and Special Cases
				# if white, move up; if black, move down
				# if first move, allowed to go 2, otherwise just 1
				# if enemy diagonal, allowed to move diagonally and take
				# if reach the end, become any piece the user wants


		Chess Game class should be doing the checks of situation involving board and piece(s)
		Piece class can check for individual illegal moves
		Board should not do any checking
		

----

Spaces between method
	vertical 							x_diff = 0
		going up a3 a5					y_diff > 0
		going down a5 a3				y_diff < 0
	horizontal							y_diff = 0
		going left h2 a2				x_diff < 0
		going right a2 h2				x_diff > 0
	diagonal 							x_diff.abs = 1 && y_diff.abs = 1
		going up-right					x_diff and y_diff same sign (either + or -)
			moving right a2 d5			both are positive
			moving left d5 a2			both are negative
		going down-right				x_diff and y_diff different signs
			moving right a5 e1			x_diff > 0, y_diff < 0
			moving left e1 a5			x_diff < 0, y_diff > 0

	difficulty is that Range is one way, ascending only
	directionality doesn't matter for my methods
	there is really no difference between direction of movement, ie a->b is same as b->a, as long as you enter the arguments properly
		for vertical, enter the one with the smaller row first
		for horizontal, enter the one with the smaller letter first
		for diagonal, 
			for up-right, enter the smaller first (both will be smaller)
			for down-right, special case where we must reverse a range at some point
				so put smaller letter first
				create number range in ascending order, and then reverse it

------

To Do List (not in order)
1. update all piece classes with methods to check that moves are acceptable (complete, unchecked)
2. write an algorithm to see if a team is in check / checkm8
3. write a method to convert a pawn to any desired piece if it reaches the opposite end of the board
4. implement a way to play out whole games by entering game history
5. refactor / clean up
6. build some AI!
7. connect with online chess API and start pwning n00bz
8. display sidelined pieces
9. make sure that the @moved? flag on pieces is updated properly

-----

Checking if a king is in check brainstorm

approach:
- check each space surrounding the king
	- if enemy piece in immediate proximity of a certain type, you could be in check
		- pawn diagonally (directionality matters on this one UGH)
		- rook in any 'perpendicular' space
		- queen in any space
		- bishop in any diagonal space
		- king in any space
	- if there are any gaps, extend out in a straight line until you see a piece
		- if its an enemy of a certain type, you know you're in check
			- rook in a perpendicular space
			- bishop in a diagonal space
			- queen in either type
- check the spaces around a king where an enemy knight could be hiding
	- if an enemy knight is in one of those spaces, you're in check

steps
1. generate a list of all immediate surrounding spaces (DONE)
2. for each surrounding space, check to see if there is an enemy, and if so, check if the enemy is a threat. if no threats are detected, return an array of all the blank spaces
3. check these spaces for gaps
4. create list of spaces in a straight line from gaps up to next piece
5. check the list in 4 for enemies of a particular type
6. check knight territory

When to call the in_check? method
- for active team, during the legal_move? loop
- for opponent team, just after the move has been accepted


How to check for checkm8? This will surely be related to the in_check? method

Two situations:
1. when the king is not in check but cannot move anywhere without being checkm8ed (think there is a name for this)
2. when the king is placed under check by an opponent and nothing can be done to block this
	1. the king cannot move to get out of harms way
	2. the active team cannot move a piece to block the threat

	This suggests it would be helpful to keep track of where the threat is coming from in the in_check? method

Arguments for in_check?
- team we are checking on
- position of the king in question -> may need a helper method locate_king(team) 
Output for in_check?
- true or false
- if true, where the threat is coming from (opponent piece and position)

Maybe, the in check could return a list of possible moves for the king that would prevent checkm8, and if the list is nil, then checkm8
Also need to create a list for the pieces that could block the threatening piece
	- take the piece
	- block the piece


Note: would be more economical to cycle through the surrounding spaces of the king all in one go



Be more specific with HOW you are going to check for check


-------

update 9/17

need to now create a bunch of test boards to debug the inevitable mess
...
this is a cluster. 
Using "Out of bounds" when searching is a mess. 
Should use the simple helper method as early in the tree as you can. 

sloppy mixed use of strings and symbols for directions all over the place TODO FIX

okay so in_check? method has been tested in a number of conditins (obviously not exchaustively)

next steps (related to check):
0. undo changes made in order to run test cases
1. check a proposed move to see if it will put the character in check
2. check a proposed move after it has been approved to see if it puts the other team in check
3. use what you have to detect check mates
4. if a team is in the check state, you need to prevent any moves that do not allow that user out of check

and existing to do list, with remaining items, recopied here:

3. write a method to convert a pawn to any desired piece if it reaches the opposite end of the board
4. implement a way to play out whole games by entering game history (and store game history)
5. refactor / clean up
6. build some AI!
7. connect with online chess API and start pwning n00bz
8. display sidelined pieces
9. make sure that the @moved? flag on pieces is updated properly

Back to in check - when testing a move to make sure you are not moving into check, i realized that many of the helper methods pull data from the actual active board... 
Which is the less painful route:
1. create a hypothetical future board based on the board and feed it into each of the helper methods
2. make the move on the actual board, and then if it is in check, undo the move and ask for a different move

option 1 seems like a whole lot more work -> lets see what we can to for option 2

detects it, but need to try a different move
hmm... if I do it this way, undoing the move is really hard because I have to figure out how to untake a piece if it was taken and how to unmove a piece if it was moved.... maybe there should be a "move consequences" method to happen only after the move is approved.
Still need a way to take a piece temporarily... Do you? Is there ever a case where the elimination of another piece will impact the check? Its not the taking that would put you in check, its the movement of your player. Unless its the king himself being moved, then it could get messy.
Could pass a piece as "pending death" and remove it temporarily from the board.




get proposed move
	any taken pieces go to "purgatory" -> off board but not yet taken
	original spaces stored in "purgatory"
	run in_check?
		if true (in check) undo purgatory: return pieces to original spaces
		if false: complete move
			taken pieces in purgatory
			moved flags updated
	purgatory is a state variable with following 'slots'
		- piece to be taken
		- piece to be taken's board space
		- piece to move
		- piece to move's origin space


------

update 9/21/2015

split movement into different steps, with a test of the check status in the middle
realized that there is at least one fatal flaw in how i determine if a piece is in check or not:
	- when I check that a space is an edge space, I failed to consider the scenario where the examination path runs along an edge
		- to fix this, I must build in a way to continue propagation in a single direction until OFF the Board, and only then end the search in that direction. This will involve the relative space method of board. I already have it return "Out of bounds" once its reached that point, so maybe try making that the end condition...
			- after fixing this bug, I can come back to making sure that pieces cannot move into check

seems to work, will need more extensive testing soon, but would like to move on now..

Checking if the new active team is in check
	in_check? will quickly tell us if we are in check
	but what to do if this is true?
		the move into check loop should catch situations where the piece has not moved out of check yet - how nice! so all we really need to do is remind the active player that they are in check at the beginning of their turn

how to check for check mate?
	- the brute force method would be to check each move possibility, but that seems like a dumb and complicated way to do it.... 
	- maybe a tree of sorts... you know from in_check? where the threat is coming from, so you could construct a tree to search which may speed up the brute force method?
		- check king movements first to see if there are any spaces where the king can move to avoid check
		- check ways to block the incoming threat
			- this is a lot of hypothetical board scenarios... which would mean a lot of setting and resetting of purgatory
			- doesn't seem like the smartest way to do this
		- check ways to take the incoming threat
		- if no other ways, then checkm8


	- how else would you do it besides checking all possibilities?
		- storing all possible checkm8 scenarios is probably out of the question
		- maybe there is some level of abstraction between all move possibilities and all check mates, like patterns or type of check mates?


Check for checkm8 when in check
copying fake boards may not be that bad

start off with existing board

Avoidance Strategy 1: Move the King

get list of king's possible moves (similar to generating the surrounding spaces list as before)
create a board copy for each move
make the move on the copied board
check each board for check
if even one comes out as a safe momcve, then not check m8 and continue with the game
if all moves are exhausted without moving the king to safety, enter obstruction check

Avoidance Strategy 2: Obstruction of Threat

if the threat is a knight, just move on to the next strategy because knights can fly
know where the threat is coming from (at least 1 source)
know the path between the king and the threat
know all the pieces on the king's team
try to move each piece onto each part of that path (dumb way, but it would work)
	- can this get smarter?
		- use path characteristics to help
			- is it a diagonal, vertical, or horizontal path?
			- how far is the piece from the closest space in the path?

Avoidance Strategy 3: Eliminate the Threat



note: we are repeating the work of finding the bad guy in Strategy 2, not DRY code :/ TODO refactor later


overloaded mentally because you are trying to do too many things at once
break it down and do one thing at a time

get path between king and threat
	locate king -> method for this, or pass it in
	locate threat
		get the vacancies around the king -> method for this -> passed in with argument
		run a method to locate the source of the thread -> just modify the existing method that checks for ranged threats
	get path between the two spaces -> should be simple submethod for this, if not write it

get the active pieces on a team
	start off the game by storing them
	any time a piece is taken, update this array 
	doiuble loop through active pieces and the threat_path
		if you can move a piece onto the threat path and the results are no check,
			return true
return false



--- 
decided that I don't want to repeat these methods so many times, so rather than have an in_check, a checkmate, etc.
just do it all in one big method that makes calls to smaller methods
and return a status variable :in_check, :checkmate, :no_restrictions
and then there will be a similar but smaller method that will check for move_into_check? using similar sub methods

game_status
	get active team
	get kings location
	get info about spaces to the king, namely
		vacancies (list of spaces with the direction that they're in relative to the king)
		enemies (list of spaces with the direction and the piece)
	run in_check?
		checks immediately surrounding spaces
			if true, return boolean, as well as the piece and the space that its in
		checks knight area
			if found, return boolean true as well as the piece and the space that its in
		checks distance spaces
			if it finds a threat in the distance spaces, it should return boolean true, along with the space and the space's occupant
	if not in check, return status of normal (WHAT ABOUT STALEMATE :/ ) come back to stalemate :/
	if in check, check for check mate
		way 1 (listed above)
		way 2
		way 3 
	if not in checkmate, jsut in check, return that information
	if in checkmate, game over.
	if in stalemate, game over.

----
9/22/2015

Thought I found a bug where killing a knight that was causing check didn't end the check but I could not replicate it - keep an eye out for it. 

Check seems to be working, now need to check for check mate


mega method update_game_status
looks at board, specifically spaces surrounding king
runs three tests to see if the king is in check
if it is in check, runs three more tests to see if its in check mate
	it probably make sense to run particular tests depending on the type of check
		ie if its from a knight, you cannot block, but you can move the king or kill the knight
		if its ranged attack, you can do all 3
		if its close attack, you can kill or move, but not obstruct
ultimately, return the game state and a packet with the threatening piece and the space that he's in if there is a check
if check mate then the game is over
the purpose of doing it this way is to prevent repetition of searching around the king as much as possible
write it out and it may be possible to segregate into smaller methods later
also need to update the game loop to accomodate this new way of doing things
specifically, how are you going to check for moving into check?

--- 
9/23/2014

Running debug methods, found that the game thinks pawns can move horizontally! 

may be a bug wherein I am using the same stashed variables for the actual move, as well as the hypothetical moves being evaluated

you rely on the same method in two places
you don't want to repeat yourself with two identical methods with different names
so can you alter the methods so that they modify different groups of data?
what are they even modifying?

here is what you have

	propose_move
		get_player_move - endless loop until a legal move is entered
			select_a_piece - endless loop until you select a piece thats on your team
			enter_desired_move gets user input 1x
			legal_move? checks that the move is legal
				checks a variety of moves, as well as special cases
				special cases is NOT dry (we are checking movement patterns of pawn here, as well as in the piece class)

			once a move that is legal (on an empty board) has been entered
			the move is proposed with move_piece_phase_1, which stashes the original board state in a temporary array and then completes the move 

I could put out bugs all day until this code works, but I think this is time for an intervention with a massive refactor. Luckily, I have all the pieces in place, so it shouldn't require too much rework. I will outline, rename, and clean up so that its super obvious what's going on. 



How it should work:
		initialize a new game
			set a new board
			set a team to go first
			set a game_history array (new Class!)
			populate the team arrays (decision needed: include the space? is this redundant wrt the board object?)

		enter game loop (breaks when checkmate or stalemate)
			move_piece_loop
				select a piece
				confirm that the piece is on the active team (loop continuously until it is)
				enter a move
				confirm that the move is legal (loop continuously until it is)
					the piece is on the board
					piece is allowed to move in such a way
						check first-time move priviledges
					there are no obstructions (its not illegally hopping)
					the destination space is not occupied by a teammate
				stash the move in purgatory and make the move on the board
				is the active team now in check?
					yes -> undo the move, 
						use purgatory to move the pieces back to their pre-move states
						clear the stash
						re enter the move loop
					no -> finalize the move
						update piece info
							destroy pieces that are taken
							mark moved pieces as moved
							update team tracking arrays
						empty the move stash


			update game state
				check if enemy is now in check (this method must be independent of existing purgatory)
					yes ->
						check if enemy is in check mate
							yes ->
								end game
							no -> 
								alert team that he is in check and must move out of check
					no ->
						set game state to normal and continue
				check for stalemate
					yes ->
						end game, declaring a stalemate

			switch teams and continue game loop
					


		requires updating the check mate checks
		actually, if move_loop works, purgatory should be clear by the time it inspects for checkmate,
		therefore the only updates required are to replace methods that I deleted 
		at taht point, I will be able to check everything

		to replace move_phase_1 (what a crappy method name) the following submethods are needed:
			- stash the board state
			- move the piece to the open spot
			- (since its the king, and the list of vacant spots is pre sorted, you don't need to check move legality UNLESS THIS CHANGES WHEN YOU ADD ABILITY TO CASTLE)
			- check if in check
				yes -> 
					restore board state
					continue
				no ->
					restore board state
					return true (that you CAN move king)


	what happens when the active team is in check and they select the wrong piece to move out of check?
		if at any point if the move is illegal for any reason, just re enter the move loop?
		that means compartmentalizing the move loop, but thats pok
			


testing refactored code, but had a thought about speeding up the checkmate check:
1. when the source of the threat is located, it gives a hint that can narrow your search field
ie if a ranged attacker is threatening, you know that you can't be in the line of fire, which eliminates 2 spaces to check... IMPACT: MINOR
2. you can speed up the in check method by providing the optional enemies and vacancies packets! IMPACT: MAJOR
	... or can you? because often times you are evaluating a totally new position. Let's see if there is a case where you can, after you are finished checking out the current situation.

refactored code to detect checkmates
next up?
check whole games for check and check mate
then see to do list

-----
9/24/2015

In the home stretch, I can feel it (maybe). 

Let's write in some special cases:
	when a pawn reaches the opposite end, it becomes any piece desired by the player
		when a pawn moves, get its space, and if the color + row combination is a certain type,
		invite the player to suggest a piece - DONE
	ability to castle...

	castling violates king's normal move patterns, so we need some way to bypass that
		conditions for castling
			king has not moved
			rook has not moved
			no pieces in between king and rook
			king is not in check
			king will not move into check
			The king does not pass through a square that is attacked by an enemy piece
	... this is begining to look like a nightmare to program.. Asian chess doesn't allow castling - maybe thats an excuse for not programming it >:D

		you could modify the allowable_move method in piece to allow 2 to the right or left, and then check the rest of the condition in special_cases

	Screw it, I will come back later (if I feel like it)
	The more significant feature I want to work on now is game logging, which will allow loading and saving of games, and potentially allow me to play out full games by entering game history
		I want it to be able to store in a human readable form (ie a4 -> b5) as well as the more complicated chess notation (mainly because it will allow me to import famous games)
----

10/2/2015

Back at it after a couple weeks!

Four main tasks remain (at least):
1. castling
2. stalemate
3. game history
4. save/load

Castling:
started in on this. Here is how I think it could work:
User indicates they want to castle by entering 'cl' or 'cr' into move collection method. Based on which team asks this, you should be able to determine which board spaces need investigation, since the colors are always on the same side of the board (in this variation of the game). 
In legal_move?, call a separate method (castle_okay? or something like that) that will run all the checks needed for a castle. If this comes back true, return true and bypass the rest of the checks in legal moves. This means there will be some redundancy in legal_moves... so be it. 
Executing the move should not be difficult, but it may require its own method, as simple_move or whatever its called only moves one piece. 

Going to take a crack at this approach and report back. 

The trickiest part about this is moving the king through the spaces and making sure its not in check. Here is how I am going to approach it:
- order the spaces array in the order that the king would move through them
- stash the current board state
- while iterating over each space in the list
	- first check that the space is empty (restore board state then return false if it isn't)
	- move the king into the space anc run in_check? (restore board state and return false if its true)
- after the iterations, restore board state (because the move loop will take care of actually moving the piece later)
- this is the last test, so if it passes, return true

Ran into problem
in_check? already uses purgatory, and my method for seeing if castling is okay is also using the same variables, meaning its getting messed up and stashing/restoring improperly

solutions:
1. use a different local variable to do the same thing as stash
2. use a different global variable to do the same thing as stash

Since this is only happening at this point in the code, might as well use a local var.


Fixed that glitch, and in the process messed up the "o" for selecting a new piece option. 

-

Okay so not the prettiest code but it works so far, so I am going to move on and refactor later when its all good. 

Next up:
checking for stalemate

How to approach it?
Checking all move possibilities for all active pieces seems... 
Well, you would only need to check until you found a move that doesn't result in the active team being in check, so it probably wouldn't take that long actually. 
Currently, don't have a method that generates all possible moves for a piece though.
The acceptable_move? method in each piece type checks a proposed move, but does not generate. 
One catch-all but computationally expensive way to do it would be to try moving every piece to every space on the board, using legal_move? on each combination. 
The other problem is that we need to use stash and unstash again, and its used by in_check method. 

Lets think about this.
Stalemate is really just checkmate without being in check, so it should be able to recycle all the procedures from checkmate. Currently, thats all in one big block in update status. So ideally... 
there would be
in_check?
mate?

yes, yes => checkmate
no, yes => stalemate
no, no => normal

This is not quite true, because the checkmate detection only looks at the three scenarios around the king: move the king, destroy the threat, block the threat. 

Going to do it the dumb way:
for each piece on player's team
for each space on the board
try to move the piece to the space
if its legal and doesn't result in check
	return false
...
end of loop
restore board state
return true

-
Stalemate detection works! 

now, game history

I think I should create a new class for this
At first, the class will stash each completed move in terms that my program can read
Then, it will include a method to translate each move to the algebraic notation

What fields do I need to capture?

turn, active_team, origin, move, piece, game_state
I've seen it done where 1 turn = each team moving once, but in this case it is easier to just make a turn = a single team making a move

put in a quick solution
one problem (so far): the move completes, which clears the purgatory, and then the game state updates. So the game state is not really reflecting what happened at the end of that turn. What should it represent? The state before the move or the state after the move? Do we even need to keep track of game state? I think so, because I believe (thought I could be wrong) that in algebraic notation, there is a special indicator for things like check. 
Going to leave it as is, and say that it represents pre-move game state. 

- 
Have some game history, now, saving and loading. 

to save a game, we would have to stash all of the game state variables, compress into yaml, then write to a fil

for loading a game, its the opposite

so, for saving, what exactly do we need?
the board with the alive pieces (can populate team arrays after loading), the turn, the game state


----

10/5/2015
testing stalemate method again
if white makes a move, and then updatestatus is run after that move, the stalemate check (which is a sub routine of update status) should really be run for team black. 

glad I am checking it because I am finding many problems
most recently: the stash game and undo simple move fails to restore pieces that were taken in a hypothetical move, must fix that


